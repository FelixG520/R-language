x+y
y <- 2
x+y
clear
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
x<-1
y<-2
x+y
source("~/.active-rstudio-document")
source("~/.active-rstudio-document", echo=TRUE)
x<-1
y<-2
x+y
plot(runif(50))
getwd()
setwd("E:/高帆的R语言/R语言基础")
getwd()
list.files()
dir()
x <- 3
x<-1 #赋值运算符-用的比较多 <-
1->x #赋值运算符-一般不用 ->
x=1 #赋值运算符-一般不用 =
sum(1,2,3,4,5) #sum()求和函数
y <- sum(1,2,3,4,5) #也可赋值给变量
mean(1,2,3,4,5) #mean()求平均函数
z <- mean(1,2,3,4,5)#也可赋值给变量
ls()
x<-1 #赋值运算符-用的比较多 <-
ls.str()#查看所有变量对应的数值
str(x)  #查看单个变量对应的数值
q() #退出R程序
tdata <- data.frame(name=rownames(tdata),tdata)#取数据的行名生成新的一个数据框（方便处理）
tdata
#gather（data,key,value…..）
#data参数是要处理的数据
#key参数是宽数据变为长数据时，存放需要编码的变量的变量名称，需要自己定义
#value参数是需要数据转换的变量的数值也需要自己定义。
gather(tdata,key = "Key",value = "Value",cyl,disp,mpg)
library("tidyr")
tdata <- data.frame(name=rownames(tdata),tdata)#取数据的行名生成新的一个数据框（方便处理）
tdata
#gather（data,key,value…..）
#data参数是要处理的数据
#key参数是宽数据变为长数据时，存放需要编码的变量的变量名称，需要自己定义
#value参数是需要数据转换的变量的数值也需要自己定义。
gather(tdata,key = "Key",value = "Value",cyl,disp,mp
library("tidyr")
tdata <- mtcars[1:10,1:3]#Mtcars数据是很典型的一个tidyr数据
tdata
tdata <- data.frame(name=rownames(tdata),tdata)#取数据的行名生成新的一个数据框（方便处理）
tdata
#gather（data,key,value…..）
#data参数是要处理的数据
#key参数是宽数据变为长数据时，存放需要编码的变量的变量名称，需要自己定义
#value参数是需要数据转换的变量的数值也需要自己定义。
gather(tdata,key = "Key",value = "Value",cyl,disp,mpg)
tdata
tdata <- mtcars[1:10,1:3]#Mtcars数据是很典型的一个tidyr数据
tdata
tdata <- data.frame(name=rownames(tdata),tdata)#取数据的行名生成新的一个数据框（方便处理）
tdata
gather(tdata,key = "Key",value = "Value",cyl,disp,mpg)
gather(tdata,key = 'key',value = 'value',cyl:mpg,disp)
ls("package:dplyr")
library(dplyr)
ls("package:dplyr")
library(dplyr)
#distinct函数可以用于去除重复行，相当于unique函数的功能
dplyr::distinct(rbind(iris[1:10,],iris[1:15,]))
#可以使用filter函数用指定条件对数据进行筛选
dplyr::filter (iris,Sepal.Length >7)#筛选
#distinct函数可以用于去除重复行，相当于unique函数的功能
dplyr::distinct(rbind(iris[1:10,],iris[1:15,]))
summarise(iris,avg=mean(Sepal.Length))#统计花萼长度的平均值
summarise(iris,sum=sum(Sepal.Length))#
a=data.frame(x1=c("A","B","C"),x2=c(1,2,3))
b=data.frame(x1=c("A","B","D"),x3=c(T,F,T))
dplyr::left_join(a,b,by="x1")#以x1列为基础进行连接
#右连接，right_join()
dplyr::right_join(a,b,by="x1")##以b的x1列为基础进行连接
#半连接，semi_join()
dplyr::semi_join(a,b,
dplyr::semi_join(a,b,by="x1")
#半连接，semi_join()
dplyr::semi_join(a,b,by="x1")#根据右
a=data.frame(x1=c("A","B","C"),x2=c(1,2,3))
b=data.frame(x1=c("A","B","D"),x3=c(T,F,T))
a=data.frame(x1=c("A","B","C"),x2=c(1,2,3))
b=data.frame(x1=c("A","B","D"),x3=c(T,F,T))
#左连接，left_join()
dplyr::left_join(a,b,by="x1")#以a的x1列为基础进行连接
#右连接，right_join()
dplyr::right_join(a,b,by="x1")#以b的x1列为基础进行连接
#内连接，inner_join()
dplyr::inner_join(a,b,by="x1")#取x1的交集
#全连接，full_join()
dplyr::full_join(a,b,by="x1")#取x1的并集
#半连接，semi_join()
dplyr::semi_join(a,b,by="x1")#根据右侧表的内容对左侧表进行过滤，也就是将两个表的数据的交集取出来
#反连接，anti_join()
#半连接，semi_join()
dplyr::semi_join(a,b,by="x1")
class(state)
state <- as.data.frame(state.x77[,c('Murder','Population','Illiteracy','Income','Frost')])
class(state)
fit<- lm (Murder ~ Population+Illiteracy+Income+Frost,data=state)
#使用summary()得出统计结果
summary(fit)
ls()
par()
set.seed(666)#给一个固定的数可以给第一次生成的随机数绑定
runif(50)
runif(50)
set.seed(666)
runif(50)
runif(50)
set.seed(666)
runif(50)
runif(50)
runif(50)
set.seed(666)#给一个固定的数可以给第一次生成的随机数绑定
runif(50)
runif(50)
set.seed(666)
runif(50)
install.packages("doBy")
library(doBy)
#如果设置desc选项等于true，那么就会计算一些描述值，包括中位数、平均数、平均数的标准误、平均置信度为95%的置信空间、方差、标准差、以及变异系数等
stat.desc(myvars,desc = T)
install.packages("Hmisc")
install.packages("pastecs")
library(vcd)
#先使用table()函数计算两者的频数
mytable <- table(Arthritis$Treatment,Arthritis$Improved)
#直接使用chisq.test()函数进行卡方独立检验
chisq.test(mytable)#
mytable <- table(Arthritis$Treatment,Arthritis$Improved)
chisq.test(mytable)
mytable <- table(Arthritis$Sex,Arthritis$Improved)
chisq.test(mytable)
mytable <- table(Arthritis$Treatment,Arthritis$Improved)
chisq.test(mytable)
mytable <- table(Arthritis$Sex,Arthritis$Improved)
chisq.test(mytable)
library(vcd)
mytable <- table(Arthritis$Sex,Arthritis$Improved)
chisq.test(mytable)
#首先计算三个变量的列联表，使用xtabs()计算
mytable <- xtabs(~Treatment+Improved+Sex, data=Arthritis)
mantelhaen.test(mytable)
#以state.x77（矩阵）数据为例：
cor(state.x77)
cor(state.x77, method="spearman")
#以state.x77（矩阵）数据为例：
cor(state.x77)
cor(state.x77, method="spearman")
install.packages("ggm")
library(ggm)
cor.test(state.x77[,3],state.x77[,5])
#psych包中的corr.test()函数可以一次性进行多个变量的检验，这个函数还可以进行递归操作
library(psych)
#psych包中的corr.test()函数可以一次性进行多个变量的检验，这个函数还可以进行递归操作
install.packages("psych")
ls("package:graphics")
ls("package:graphics")
methods(plot)
print("dajiahao")
print("大家好")
#编写函数就是为了减少重复代码的书写，从而让脚本更加简洁高效，增加可读性
#在R中，如果直接写函数不加括号，就会显示函数的源代码
cor
for (i in 1:10) {print ("Hello,World")}
